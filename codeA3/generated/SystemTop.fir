;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit SystemTop : 
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, dataRead : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 22:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 24:37]
      io.testerDataRead <= _T @[DataMemory.scala 24:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 26:17]
      when io.testerWriteEnable : @[DataMemory.scala 27:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 30:25]
        skip @[DataMemory.scala 27:32]
      skip @[DataMemory.scala 22:24]
    else : @[DataMemory.scala 32:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 34:31]
      io.dataRead <= _T_2 @[DataMemory.scala 34:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 36:23]
      when io.writeEnable : @[DataMemory.scala 37:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 40:19]
        skip @[DataMemory.scala 37:26]
      skip @[DataMemory.scala 32:16]
    
  module Accelerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip start : UInt<1>, done : UInt<1>, flip dataRead : UInt<32>, address : UInt<16>, writeEnable : UInt<1>, dataWrite : UInt<32>}
    
    io.writeEnable <= UInt<1>("h00") @[Accelerator.scala 33:18]
    io.address <= UInt<16>("h00") @[Accelerator.scala 34:14]
    io.dataWrite <= UInt<16>("h00") @[Accelerator.scala 35:16]
    io.done <= UInt<1>("h00") @[Accelerator.scala 36:11]
    reg stateReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Accelerator.scala 55:25]
    reg xReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 56:21]
    reg yReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 57:21]
    reg inImageReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 58:27]
    reg inImageLeftReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 59:31]
    reg inImageRightReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 60:32]
    reg inImageTopReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 61:30]
    reg inImageDownReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 62:31]
    reg debugReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 64:25]
    reg debugRegVal : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 65:28]
    io.address <= debugReg @[Accelerator.scala 66:14]
    io.dataWrite <= debugRegVal @[Accelerator.scala 67:16]
    node _T = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.start : @[Accelerator.scala 72:22]
        xReg <= UInt<1>("h00") @[Accelerator.scala 73:14]
        stateReg <= UInt<1>("h01") @[Accelerator.scala 74:18]
        debugReg <= UInt<1>("h00") @[Accelerator.scala 75:18]
        skip @[Accelerator.scala 72:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = lt(xReg, UInt<5>("h014")) @[Accelerator.scala 81:28]
        node _T_3 = mux(_T_2, UInt<2>("h02"), UInt<4>("h0a")) @[Accelerator.scala 81:22]
        stateReg <= _T_3 @[Accelerator.scala 81:16]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_4 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 39:67]
          inImageLeftReg <= UInt<1>("h00") @[Accelerator.scala 85:22]
          inImageDownReg <= UInt<1>("h00") @[Accelerator.scala 86:22]
          node _T_5 = mul(UInt<5>("h014"), UInt<1>("h01")) @[Accelerator.scala 185:28]
          node _T_6 = add(UInt<1>("h00"), _T_5) @[Accelerator.scala 185:21]
          node _T_7 = tail(_T_6, 1) @[Accelerator.scala 185:21]
          io.address <= _T_7 @[Accelerator.scala 185:16]
          inImageTopReg <= io.dataRead @[Accelerator.scala 87:21]
          yReg <= UInt<1>("h00") @[Accelerator.scala 89:12]
          stateReg <= UInt<2>("h03") @[Accelerator.scala 90:16]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<2>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            node _T_9 = add(xReg, UInt<1>("h01")) @[Accelerator.scala 100:36]
            node _T_10 = tail(_T_9, 1) @[Accelerator.scala 100:36]
            node _T_11 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 185:28]
            node _T_12 = add(_T_10, _T_11) @[Accelerator.scala 185:21]
            node _T_13 = tail(_T_12, 1) @[Accelerator.scala 185:21]
            io.address <= _T_13 @[Accelerator.scala 185:16]
            inImageRightReg <= io.dataRead @[Accelerator.scala 100:23]
            inImageDownReg <= inImageReg @[Accelerator.scala 101:22]
            node _T_14 = lt(yReg, UInt<5>("h014")) @[Accelerator.scala 103:28]
            node _T_15 = mux(_T_14, UInt<3>("h04"), UInt<4>("h09")) @[Accelerator.scala 103:22]
            stateReg <= _T_15 @[Accelerator.scala 103:16]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_16 = eq(UInt<3>("h04"), stateReg) @[Conditional.scala 37:30]
            when _T_16 : @[Conditional.scala 39:67]
              inImageReg <= inImageTopReg @[Accelerator.scala 111:18]
              node _T_17 = add(yReg, UInt<1>("h01")) @[Accelerator.scala 112:40]
              node _T_18 = tail(_T_17, 1) @[Accelerator.scala 112:40]
              node _T_19 = mul(UInt<5>("h014"), _T_18) @[Accelerator.scala 185:28]
              node _T_20 = add(xReg, _T_19) @[Accelerator.scala 185:21]
              node _T_21 = tail(_T_20, 1) @[Accelerator.scala 185:21]
              io.address <= _T_21 @[Accelerator.scala 185:16]
              inImageTopReg <= io.dataRead @[Accelerator.scala 112:21]
              node _T_22 = eq(xReg, UInt<1>("h00")) @[Accelerator.scala 114:29]
              node _T_23 = eq(xReg, UInt<5>("h013")) @[Accelerator.scala 114:45]
              node _T_24 = or(_T_22, _T_23) @[Accelerator.scala 114:37]
              node _T_25 = eq(yReg, UInt<1>("h00")) @[Accelerator.scala 114:62]
              node _T_26 = or(_T_24, _T_25) @[Accelerator.scala 114:54]
              node _T_27 = eq(yReg, UInt<5>("h013")) @[Accelerator.scala 114:78]
              node _T_28 = or(_T_26, _T_27) @[Accelerator.scala 114:70]
              node _T_29 = eq(inImageReg, UInt<1>("h00")) @[Accelerator.scala 115:33]
              node _T_30 = eq(_T_28, UInt<1>("h00")) @[Accelerator.scala 116:23]
              node _T_31 = mux(_T_29, UInt<3>("h06"), UInt<3>("h05")) @[Accelerator.scala 117:12]
              node _T_32 = mux(_T_30, _T_31, UInt<4>("h08")) @[Accelerator.scala 116:22]
              stateReg <= _T_32 @[Accelerator.scala 116:16]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_33 = eq(UInt<3>("h05"), stateReg) @[Conditional.scala 37:30]
              when _T_33 : @[Conditional.scala 39:67]
                debugReg <= UInt<3>("h05") @[Accelerator.scala 127:16]
                node _T_34 = eq(inImageLeftReg, UInt<1>("h00")) @[Accelerator.scala 128:29]
                when _T_34 : @[Accelerator.scala 128:38]
                  debugReg <= UInt<6>("h033") @[Accelerator.scala 128:49]
                  skip @[Accelerator.scala 128:38]
                node _T_35 = eq(inImageRightReg, UInt<1>("h00")) @[Accelerator.scala 129:30]
                when _T_35 : @[Accelerator.scala 129:39]
                  debugReg <= UInt<6>("h034") @[Accelerator.scala 129:50]
                  skip @[Accelerator.scala 129:39]
                node _T_36 = eq(inImageTopReg, UInt<1>("h00")) @[Accelerator.scala 130:28]
                when _T_36 : @[Accelerator.scala 130:37]
                  debugReg <= UInt<6>("h035") @[Accelerator.scala 130:48]
                  skip @[Accelerator.scala 130:37]
                node _T_37 = eq(inImageDownReg, UInt<1>("h00")) @[Accelerator.scala 131:29]
                when _T_37 : @[Accelerator.scala 131:38]
                  debugReg <= UInt<6>("h036") @[Accelerator.scala 131:49]
                  skip @[Accelerator.scala 131:38]
                debugRegVal <= inImageLeftReg @[Accelerator.scala 132:19]
                node _T_38 = eq(inImageLeftReg, UInt<1>("h00")) @[Accelerator.scala 135:25]
                node _T_39 = eq(inImageRightReg, UInt<1>("h00")) @[Accelerator.scala 136:25]
                node _T_40 = or(_T_38, _T_39) @[Accelerator.scala 135:33]
                node _T_41 = eq(inImageTopReg, UInt<1>("h00")) @[Accelerator.scala 137:25]
                node _T_42 = or(_T_40, _T_41) @[Accelerator.scala 136:33]
                node _T_43 = eq(inImageDownReg, UInt<1>("h00")) @[Accelerator.scala 138:25]
                node _T_44 = or(_T_42, _T_43) @[Accelerator.scala 137:33]
                node _T_45 = mux(_T_44, UInt<3>("h06"), UInt<3>("h07")) @[Accelerator.scala 139:22]
                stateReg <= _T_45 @[Accelerator.scala 139:16]
                when _T_44 : @[Accelerator.scala 140:33]
                  debugReg <= UInt<2>("h02") @[Accelerator.scala 140:44]
                  skip @[Accelerator.scala 140:33]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_46 = eq(UInt<3>("h06"), stateReg) @[Conditional.scala 37:30]
                when _T_46 : @[Conditional.scala 39:67]
                  io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 145:22]
                  node _T_47 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 146:34]
                  node _T_48 = add(xReg, _T_47) @[Accelerator.scala 146:27]
                  node _T_49 = tail(_T_48, 1) @[Accelerator.scala 146:27]
                  node _T_50 = add(_T_49, UInt<9>("h0190")) @[Accelerator.scala 146:41]
                  node _T_51 = tail(_T_50, 1) @[Accelerator.scala 146:41]
                  io.address <= _T_51 @[Accelerator.scala 146:18]
                  io.dataWrite <= UInt<1>("h00") @[Accelerator.scala 147:20]
                  stateReg <= UInt<4>("h08") @[Accelerator.scala 149:16]
                  node _T_52 = eq(debugReg, UInt<2>("h02")) @[Accelerator.scala 151:22]
                  when _T_52 : @[Accelerator.scala 151:31]
                    debugReg <= UInt<2>("h03") @[Accelerator.scala 151:42]
                    skip @[Accelerator.scala 151:31]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_53 = eq(UInt<3>("h07"), stateReg) @[Conditional.scala 37:30]
                  when _T_53 : @[Conditional.scala 39:67]
                    io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 156:22]
                    node _T_54 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 157:34]
                    node _T_55 = add(xReg, _T_54) @[Accelerator.scala 157:27]
                    node _T_56 = tail(_T_55, 1) @[Accelerator.scala 157:27]
                    node _T_57 = add(_T_56, UInt<9>("h0190")) @[Accelerator.scala 157:41]
                    node _T_58 = tail(_T_57, 1) @[Accelerator.scala 157:41]
                    io.address <= _T_58 @[Accelerator.scala 157:18]
                    io.dataWrite <= UInt<8>("h0ff") @[Accelerator.scala 158:20]
                    stateReg <= UInt<4>("h08") @[Accelerator.scala 160:16]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_59 = eq(UInt<4>("h08"), stateReg) @[Conditional.scala 37:30]
                    when _T_59 : @[Conditional.scala 39:67]
                      node _T_60 = sub(xReg, UInt<1>("h01")) @[Accelerator.scala 164:35]
                      node _T_61 = tail(_T_60, 1) @[Accelerator.scala 164:35]
                      node _T_62 = add(yReg, UInt<1>("h01")) @[Accelerator.scala 164:47]
                      node _T_63 = tail(_T_62, 1) @[Accelerator.scala 164:47]
                      node _T_64 = mul(UInt<5>("h014"), _T_63) @[Accelerator.scala 185:28]
                      node _T_65 = add(_T_61, _T_64) @[Accelerator.scala 185:21]
                      node _T_66 = tail(_T_65, 1) @[Accelerator.scala 185:21]
                      io.address <= _T_66 @[Accelerator.scala 185:16]
                      inImageLeftReg <= io.dataRead @[Accelerator.scala 164:22]
                      node _T_67 = add(yReg, UInt<1>("h01")) @[Accelerator.scala 166:20]
                      node _T_68 = tail(_T_67, 1) @[Accelerator.scala 166:20]
                      yReg <= _T_68 @[Accelerator.scala 166:12]
                      stateReg <= UInt<2>("h03") @[Accelerator.scala 168:16]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_69 = eq(UInt<4>("h09"), stateReg) @[Conditional.scala 37:30]
                      when _T_69 : @[Conditional.scala 39:67]
                        node _T_70 = add(xReg, UInt<1>("h01")) @[Accelerator.scala 172:20]
                        node _T_71 = tail(_T_70, 1) @[Accelerator.scala 172:20]
                        xReg <= _T_71 @[Accelerator.scala 172:12]
                        stateReg <= UInt<1>("h01") @[Accelerator.scala 174:16]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_72 = eq(UInt<4>("h0a"), stateReg) @[Conditional.scala 37:30]
                        when _T_72 : @[Conditional.scala 39:67]
                          io.done <= UInt<1>("h01") @[Accelerator.scala 178:15]
                          stateReg <= UInt<4>("h0a") @[Accelerator.scala 179:16]
                          skip @[Conditional.scala 39:67]
    
  module SystemTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip start : UInt<1>, done : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>}
    
    inst dataMemory of DataMemory @[SystemTop.scala 18:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst accelerator of Accelerator @[SystemTop.scala 19:27]
    accelerator.clock <= clock
    accelerator.reset <= reset
    io.done <= accelerator.io.done @[SystemTop.scala 23:11]
    accelerator.io.start <= io.start @[SystemTop.scala 24:24]
    accelerator.io.dataRead <= dataMemory.io.dataRead @[SystemTop.scala 27:27]
    dataMemory.io.address <= accelerator.io.address @[SystemTop.scala 28:25]
    dataMemory.io.dataWrite <= accelerator.io.dataWrite @[SystemTop.scala 29:27]
    dataMemory.io.writeEnable <= accelerator.io.writeEnable @[SystemTop.scala 30:29]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[SystemTop.scala 33:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[SystemTop.scala 34:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[SystemTop.scala 35:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[SystemTop.scala 36:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[SystemTop.scala 37:35]
    
