;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit SystemTop : 
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, dataRead : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 22:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 24:37]
      io.testerDataRead <= _T @[DataMemory.scala 24:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 26:17]
      when io.testerWriteEnable : @[DataMemory.scala 27:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 30:25]
        skip @[DataMemory.scala 27:32]
      skip @[DataMemory.scala 22:24]
    else : @[DataMemory.scala 32:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 34:31]
      io.dataRead <= _T_2 @[DataMemory.scala 34:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 36:23]
      when io.writeEnable : @[DataMemory.scala 37:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 40:19]
        skip @[DataMemory.scala 37:26]
      skip @[DataMemory.scala 32:16]
    
  module Accelerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip start : UInt<1>, done : UInt<1>, flip dataRead : UInt<32>, address : UInt<16>, writeEnable : UInt<1>, dataWrite : UInt<32>}
    
    reg reg1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Accelerator.scala 18:21]
    reg reg2 : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Accelerator.scala 19:21]
    reg1 <= io.dataRead @[Accelerator.scala 21:8]
    io.writeEnable <= UInt<1>("h00") @[Accelerator.scala 22:18]
    io.address <= UInt<16>("h00") @[Accelerator.scala 23:14]
    io.dataWrite <= reg1 @[Accelerator.scala 24:16]
    io.done <= UInt<1>("h00") @[Accelerator.scala 25:11]
    reg2 <= io.start @[Accelerator.scala 27:8]
    io.done <= reg2 @[Accelerator.scala 28:11]
    reg _T : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Accelerator.scala 37:33]
    reg _T_1 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 38:29]
    reg _T_2 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 39:29]
    reg _T_3 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 40:35]
    reg _T_4 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 41:39]
    reg _T_5 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 42:40]
    reg _T_6 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 43:38]
    reg _T_7 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 44:39]
    node _T_8 = eq(UInt<4>("h00"), _T) @[Conditional.scala 37:30]
    when _T_8 : @[Conditional.scala 40:58]
      when io.start : @[Accelerator.scala 49:22]
        _T <= UInt<4>("h01") @[Accelerator.scala 50:18]
        skip @[Accelerator.scala 49:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_9 = eq(UInt<4>("h01"), _T) @[Conditional.scala 37:30]
      when _T_9 : @[Conditional.scala 39:67]
        _T_1 <= UInt<1>("h00") @[Accelerator.scala 55:12]
        node _T_10 = lt(_T_1, UInt<5>("h014")) @[Accelerator.scala 56:28]
        node _T_11 = mux(_T_10, UInt<4>("h02"), UInt<4>("h0a")) @[Accelerator.scala 56:22]
        _T <= _T_11 @[Accelerator.scala 56:16]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_12 = eq(UInt<4>("h02"), _T) @[Conditional.scala 37:30]
        when _T_12 : @[Conditional.scala 39:67]
          _T_2 <= UInt<1>("h00") @[Accelerator.scala 60:12]
          _T <= UInt<4>("h03") @[Accelerator.scala 61:16]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_13 = eq(UInt<4>("h03"), _T) @[Conditional.scala 37:30]
          when _T_13 : @[Conditional.scala 39:67]
            node _T_14 = add(_T_2, UInt<1>("h01")) @[Accelerator.scala 66:40]
            node _T_15 = tail(_T_14, 1) @[Accelerator.scala 66:40]
            node _T_16 = mul(UInt<5>("h014"), _T_15) @[Accelerator.scala 135:28]
            node _T_17 = add(_T_1, _T_16) @[Accelerator.scala 135:21]
            node _T_18 = tail(_T_17, 1) @[Accelerator.scala 135:21]
            io.address <= _T_18 @[Accelerator.scala 135:16]
            _T_6 <= io.dataRead @[Accelerator.scala 66:21]
            node _T_19 = lt(_T_2, UInt<5>("h014")) @[Accelerator.scala 68:28]
            node _T_20 = mux(_T_19, UInt<4>("h04"), UInt<4>("h09")) @[Accelerator.scala 68:22]
            _T <= _T_20 @[Accelerator.scala 68:16]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_21 = eq(UInt<4>("h04"), _T) @[Conditional.scala 37:30]
            when _T_21 : @[Conditional.scala 39:67]
              node _T_22 = sub(_T_2, UInt<1>("h01")) @[Accelerator.scala 73:40]
              node _T_23 = tail(_T_22, 1) @[Accelerator.scala 73:40]
              node _T_24 = mul(UInt<5>("h014"), _T_23) @[Accelerator.scala 135:28]
              node _T_25 = add(_T_1, _T_24) @[Accelerator.scala 135:21]
              node _T_26 = tail(_T_25, 1) @[Accelerator.scala 135:21]
              io.address <= _T_26 @[Accelerator.scala 135:16]
              _T_6 <= io.dataRead @[Accelerator.scala 73:21]
              node _T_27 = eq(_T_1, UInt<1>("h00")) @[Accelerator.scala 75:29]
              node _T_28 = eq(_T_1, UInt<5>("h013")) @[Accelerator.scala 75:45]
              node _T_29 = or(_T_27, _T_28) @[Accelerator.scala 75:37]
              node _T_30 = eq(_T_2, UInt<1>("h00")) @[Accelerator.scala 75:62]
              node _T_31 = or(_T_29, _T_30) @[Accelerator.scala 75:54]
              node _T_32 = eq(_T_2, UInt<5>("h013")) @[Accelerator.scala 75:78]
              node _T_33 = or(_T_31, _T_32) @[Accelerator.scala 75:70]
              node _T_34 = eq(_T_3, UInt<1>("h00")) @[Accelerator.scala 76:33]
              node _T_35 = eq(_T_33, UInt<1>("h00")) @[Accelerator.scala 77:23]
              node _T_36 = mux(_T_34, UInt<4>("h06"), UInt<4>("h05")) @[Accelerator.scala 78:12]
              node _T_37 = mux(_T_35, _T_36, UInt<4>("h09")) @[Accelerator.scala 77:22]
              _T <= _T_37 @[Accelerator.scala 77:16]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_38 = eq(UInt<4>("h05"), _T) @[Conditional.scala 37:30]
              when _T_38 : @[Conditional.scala 39:67]
                node _T_39 = eq(_T_4, UInt<1>("h00")) @[Accelerator.scala 86:25]
                node _T_40 = eq(_T_5, UInt<1>("h00")) @[Accelerator.scala 87:25]
                node _T_41 = and(_T_39, _T_40) @[Accelerator.scala 86:33]
                node _T_42 = eq(_T_6, UInt<1>("h00")) @[Accelerator.scala 88:25]
                node _T_43 = and(_T_41, _T_42) @[Accelerator.scala 87:33]
                node _T_44 = eq(_T_7, UInt<1>("h00")) @[Accelerator.scala 89:25]
                node _T_45 = and(_T_43, _T_44) @[Accelerator.scala 88:33]
                node _T_46 = mux(_T_45, UInt<4>("h06"), UInt<4>("h07")) @[Accelerator.scala 90:22]
                _T <= _T_46 @[Accelerator.scala 90:16]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_47 = eq(UInt<4>("h06"), _T) @[Conditional.scala 37:30]
                when _T_47 : @[Conditional.scala 39:67]
                  io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 95:22]
                  node _T_48 = mul(UInt<5>("h014"), _T_2) @[Accelerator.scala 96:34]
                  node _T_49 = add(_T_1, _T_48) @[Accelerator.scala 96:27]
                  node _T_50 = tail(_T_49, 1) @[Accelerator.scala 96:27]
                  node _T_51 = add(_T_50, UInt<9>("h0190")) @[Accelerator.scala 96:41]
                  node _T_52 = tail(_T_51, 1) @[Accelerator.scala 96:41]
                  io.address <= _T_52 @[Accelerator.scala 96:18]
                  io.dataWrite <= UInt<8>("h0ff") @[Accelerator.scala 97:20]
                  _T <= UInt<4>("h08") @[Accelerator.scala 99:16]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_53 = eq(UInt<4>("h07"), _T) @[Conditional.scala 37:30]
                  when _T_53 : @[Conditional.scala 39:67]
                    io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 104:22]
                    node _T_54 = mul(UInt<5>("h014"), _T_2) @[Accelerator.scala 105:34]
                    node _T_55 = add(_T_1, _T_54) @[Accelerator.scala 105:27]
                    node _T_56 = tail(_T_55, 1) @[Accelerator.scala 105:27]
                    node _T_57 = add(_T_56, UInt<9>("h0190")) @[Accelerator.scala 105:41]
                    node _T_58 = tail(_T_57, 1) @[Accelerator.scala 105:41]
                    io.address <= _T_58 @[Accelerator.scala 105:18]
                    io.dataWrite <= UInt<1>("h00") @[Accelerator.scala 106:20]
                    _T <= UInt<4>("h08") @[Accelerator.scala 108:16]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_59 = eq(UInt<4>("h08"), _T) @[Conditional.scala 37:30]
                    when _T_59 : @[Conditional.scala 39:67]
                      node _T_60 = add(_T_2, UInt<1>("h01")) @[Accelerator.scala 112:20]
                      node _T_61 = tail(_T_60, 1) @[Accelerator.scala 112:20]
                      _T_2 <= _T_61 @[Accelerator.scala 112:12]
                      _T_4 <= _T_3 @[Accelerator.scala 113:22]
                      _T_3 <= _T_5 @[Accelerator.scala 114:18]
                      node _T_62 = add(_T_1, UInt<1>("h01")) @[Accelerator.scala 115:36]
                      node _T_63 = tail(_T_62, 1) @[Accelerator.scala 115:36]
                      node _T_64 = mul(UInt<5>("h014"), _T_2) @[Accelerator.scala 135:28]
                      node _T_65 = add(_T_63, _T_64) @[Accelerator.scala 135:21]
                      node _T_66 = tail(_T_65, 1) @[Accelerator.scala 135:21]
                      io.address <= _T_66 @[Accelerator.scala 135:16]
                      _T_5 <= io.dataRead @[Accelerator.scala 115:23]
                      _T <= UInt<4>("h03") @[Accelerator.scala 118:16]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_67 = eq(UInt<4>("h09"), _T) @[Conditional.scala 37:30]
                      when _T_67 : @[Conditional.scala 39:67]
                        node _T_68 = add(_T_1, UInt<1>("h01")) @[Accelerator.scala 122:20]
                        node _T_69 = tail(_T_68, 1) @[Accelerator.scala 122:20]
                        _T_1 <= _T_69 @[Accelerator.scala 122:12]
                        _T <= UInt<4>("h01") @[Accelerator.scala 124:16]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_70 = eq(UInt<4>("h0a"), _T) @[Conditional.scala 37:30]
                        when _T_70 : @[Conditional.scala 39:67]
                          io.done <= UInt<1>("h01") @[Accelerator.scala 128:15]
                          _T <= UInt<4>("h0a") @[Accelerator.scala 129:16]
                          skip @[Conditional.scala 39:67]
    
  module SystemTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip start : UInt<1>, done : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>}
    
    inst dataMemory of DataMemory @[SystemTop.scala 18:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst accelerator of Accelerator @[SystemTop.scala 19:27]
    accelerator.clock <= clock
    accelerator.reset <= reset
    io.done <= accelerator.io.done @[SystemTop.scala 23:11]
    accelerator.io.start <= io.start @[SystemTop.scala 24:24]
    accelerator.io.dataRead <= dataMemory.io.dataRead @[SystemTop.scala 27:27]
    dataMemory.io.address <= accelerator.io.address @[SystemTop.scala 28:25]
    dataMemory.io.dataWrite <= accelerator.io.dataWrite @[SystemTop.scala 29:27]
    dataMemory.io.writeEnable <= accelerator.io.writeEnable @[SystemTop.scala 30:29]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[SystemTop.scala 33:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[SystemTop.scala 34:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[SystemTop.scala 35:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[SystemTop.scala 36:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[SystemTop.scala 37:35]
    
